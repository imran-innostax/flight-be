
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.SpecialServiceRuleTableScalarFieldEnum = {
  id: 'id',
  enable: 'enable',
  currency: 'currency',
  origin: 'origin',
  destination: 'destination',
  carriercode: 'carriercode',
  offermeals: 'offermeals',
  offerseats: 'offerseats',
  Offerfrequentflyermiles: 'Offerfrequentflyermiles',
  offerpricewithincludedbaggage: 'offerpricewithincludedbaggage'
};

exports.Prisma.LocationsScalarFieldEnum = {
  id: 'id',
  iata: 'iata',
  cityName: 'cityName',
  airportName: 'airportName',
  country: 'country',
  countryCode: 'countryCode',
  icon: 'icon'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  orderRef: 'orderRef',
  orderType: 'orderType',
  status: 'status',
  reference: 'reference',
  paymentIntentId: 'paymentIntentId',
  paymentStatus: 'paymentStatus',
  supplier: 'supplier',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  stripeSessionId: 'stripeSessionId',
  razorpayOrderId: 'razorpayOrderId',
  flightOfferId: 'flightOfferId',
  flightInternalSource: 'flightInternalSource',
  userEmail: 'userEmail'
};

exports.Prisma.PassengerScalarFieldEnum = {
  id: 'id',
  passengerId: 'passengerId',
  countryCode: 'countryCode',
  email: 'email',
  dateOfBirth: 'dateOfBirth',
  passengerType: 'passengerType',
  title: 'title',
  gender: 'gender',
  firstName: 'firstName',
  lastName: 'lastName',
  seatNumber: 'seatNumber',
  fareOption: 'fareOption',
  bookingId: 'bookingId',
  phone: 'phone'
};

exports.Prisma.ItineraryScalarFieldEnum = {
  id: 'id',
  duration: 'duration',
  bookingId: 'bookingId'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  number: 'number',
  issuanceDate: 'issuanceDate',
  expiryDate: 'expiryDate',
  issuanceCountryCode: 'issuanceCountryCode',
  issuanceLocation: 'issuanceLocation',
  nationality: 'nationality',
  documentType: 'documentType',
  passengerId: 'passengerId',
  holder: 'holder',
  birthPlace: 'birthPlace'
};

exports.Prisma.PriceScalarFieldEnum = {
  id: 'id',
  basePrice: 'basePrice',
  grandTotal: 'grandTotal',
  discountAmt: 'discountAmt',
  commissionAmt: 'commissionAmt',
  currency: 'currency',
  bookingId: 'bookingId'
};

exports.Prisma.FeeScalarFieldEnum = {
  id: 'id',
  type: 'type',
  amount: 'amount',
  refundable: 'refundable',
  currency: 'currency',
  priceId: 'priceId'
};

exports.Prisma.BaggageScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  weight: 'weight',
  type: 'type',
  passengerId: 'passengerId'
};

exports.Prisma.RouteScalarFieldEnum = {
  id: 'id',
  departIataCode: 'departIataCode',
  departTerminal: 'departTerminal',
  departAt: 'departAt',
  arrivalIataCode: 'arrivalIataCode',
  arrivalTerminal: 'arrivalTerminal',
  arrivalAt: 'arrivalAt',
  flightNumber: 'flightNumber',
  aircraftCode: 'aircraftCode',
  duration: 'duration',
  numberOfStops: 'numberOfStops',
  carrierCode: 'carrierCode',
  routeId: 'routeId',
  itineraryId: 'itineraryId'
};

exports.Prisma.FareDetailsByRouteScalarFieldEnum = {
  id: 'id',
  routeId: 'routeId',
  fareBasis: 'fareBasis',
  class: 'class',
  brandedFare: 'brandedFare',
  includedCheckedBagsUnit: 'includedCheckedBagsUnit',
  includedCheckedBagsWeight: 'includedCheckedBagsWeight',
  includedCheckedBagsWeightUnit: 'includedCheckedBagsWeightUnit',
  cabin: 'cabin',
  passengerId: 'passengerId'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  accesstoken: 'accesstoken',
  refreshtoken: 'refreshtoken'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  enable: 'enable',
  regionality: 'regionality',
  provider: 'provider',
  validTill: 'validTill'
};

exports.Prisma.LoggingScalarFieldEnum = {
  id: 'id',
  corelationId: 'corelationId',
  date: 'date',
  serviceType: 'serviceType',
  logType: 'logType',
  log: 'log',
  bookingId: 'bookingId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  specialServiceRuleTable: 'specialServiceRuleTable',
  locations: 'locations',
  Booking: 'Booking',
  Passenger: 'Passenger',
  Itinerary: 'Itinerary',
  Document: 'Document',
  Price: 'Price',
  Fee: 'Fee',
  Baggage: 'Baggage',
  Route: 'Route',
  fareDetailsByRoute: 'fareDetailsByRoute',
  Users: 'Users',
  payment: 'payment',
  logging: 'logging'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
